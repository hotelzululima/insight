/*-
 * Copyright (C) 2010-2014, Centre National de la Recherche Scientifique,
 *                          Institut Polytechnique de Bordeaux,
 *                          Universite de Bordeaux.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#include <cassert>
#include <iomanip>
#include <iostream>
#include <sstream>

template <typename Value>
RegisterMap<Value>::RegisterMap() : registermap()
{
}

template <typename Value>
RegisterMap<Value>::RegisterMap(const RegisterMap &other)
: Object(other), registermap(other.registermap)
{
}

template <typename Value>
RegisterMap<Value>::~RegisterMap ()
{
}

template <typename Value>
Value
RegisterMap<Value>::get(const RegisterDesc *r) const
  throw (UndefinedValueException)
{
  assert (!r->is_alias());

  if (!is_defined(r))
    throw UndefinedValueException ("for register " + r->get_label ());

  return registermap.find(r)->second;
}

template <typename Value>
void
RegisterMap<Value>::put(const RegisterDesc *r, Value v)
{
  assert (!r->is_alias());
  assert (v.get_size () == r->get_register_size ());

  RegisterMap<Value>::registermap[r] = v;
}

template <typename Value>
bool
RegisterMap<Value>::is_defined(const RegisterDesc *r) const
{
  assert (!r->is_alias());

  return (RegisterMap<Value>::registermap.find(r) !=
	  RegisterMap<Value>::registermap.end());
}


template <typename Value>
void
RegisterMap<Value>::output_text(std::ostream &os) const
{
  if (registermap.size() == 0)
    return;

  for (const_reg_iterator reg = registermap.begin(); reg != registermap.end();
       reg++) {
    os << "[";
    reg->first->output_text (os);
    os << " = ";
    reg->second.output_text(os);
    os << "]" << std::endl;
  }
}

template <typename Value>
typename RegisterMap<Value>::const_reg_iterator
RegisterMap<Value>::regs_begin () const
{
  return registermap.begin ();
}

template <typename Value>
typename RegisterMap<Value>::const_reg_iterator
RegisterMap<Value>::regs_end () const
{
  return registermap.end ();
}

template <typename Value>
typename RegisterMap<Value>::const_reg_iterator
RegisterMap<Value>::regs_find (const RegisterDesc *reg) const
{
  return registermap.find(reg);
}

template <typename Value>
typename RegisterMap<Value>::reg_iterator
RegisterMap<Value>::regs_begin ()
{
  return registermap.begin ();
}

template <typename Value>
typename RegisterMap<Value>::reg_iterator
RegisterMap<Value>::regs_end ()
{
  return registermap.end ();
}

template <typename Value>
typename RegisterMap<Value>::reg_iterator
RegisterMap<Value>::regs_find (const RegisterDesc *reg)
{
  return registermap.find(reg);
}

template <typename Value>
void
RegisterMap<Value>::clear(const RegisterDesc *reg)
{
  reg_iterator r = regs_find(reg);
  if (r != regs_end())
    registermap.erase(r);
}

template <typename Value>
int
RegisterMap<Value>::size () const
{
  return registermap.size ();
}
