#ifndef ABSTRACTDOMAINSTEPPER_II
# define ABSTRACTDOMAINSTEPPER_II

template <typename CTX, typename PP>
AbstractDomainStepper<CTX,PP>::AbstractDomainStepper (const Architecture *arch)
  : arch (arch), unkgen (Value::unknown_value_generator ()),
    map_dynamic_jumps_to_memory (false),
    dynamic_jump_threshold (10)
{
}

template <typename CTX, typename PP>
AbstractDomainStepper<CTX,PP>::~AbstractDomainStepper ()
{
}

template <typename CTX, typename PP>
typename AbstractDomainStepper<CTX,PP>::State *
AbstractDomainStepper<CTX,PP>::restrict_state_to_condition (const State *s,
							    const Expr *cond)
{
  Context *newctx = restrict_to_condition (s->get_Context (), cond);
  if (newctx == NULL)
    return NULL;
  ProgramPoint *pp = s->get_ProgramPoint ();
  pp->ref ();
  return new State (pp, newctx);
}

template <typename CTX, typename PP>
void AbstractDomainStepper<CTX,PP>::destroy_state_set (StateSet *s)
{
  for (typename StateSet::iterator i = s->begin(); i != s->end (); i++)
    (*i)->deref ();
  delete s;
}

template <typename CTX, typename PP>
typename AbstractDomainStepper<CTX,PP>::StateSet *
AbstractDomainStepper<CTX,PP>::get_successors (const State *s,
					       const StmtArrow *arrow)
  throw (UndefinedValueException)
{
  StateSet *result = new StateSet ();
  Context *newctx = restrict_to_condition (s->get_Context (),
					   arrow->get_condition ());

  if (newctx == NULL)
    return result;

  ProgramPoint *from = s->get_ProgramPoint ();

  try
    {
      if (arrow->is_static ())
	{
	  StaticArrow *sa = (StaticArrow *) arrow;
	  MicrocodeAddress tgt = sa->get_target ();
	  exec (newctx, sa->get_stmt ());
	  ProgramPoint *to = from->next (tgt);
	  result->insert (new State (to, newctx));
	}
      else
	{
	  DynamicArrow *da = (DynamicArrow *) arrow;
	  Expr *addr = da->get_target ();

	  assert (! da->get_stmt()->is_Assignment ());

	  Value vaddr = eval (newctx, addr);
	  std::vector<address_t> *targets =
	    value_to_concrete_addresses (newctx, vaddr);
	  bool add_pc_constraint = targets->size () > 1;

	  for (size_t i = 0; i < targets->size (); i++)
	    {
	      address_t a = targets->at(i);
	      MicrocodeAddress tgt (a);
	      ProgramPoint *to = from->next (tgt);
	      State *ns = new State (to, newctx);
	      newctx->ref ();

	      if (add_pc_constraint)
		{
		  Expr *pc_constraint =
		    Expr::createEquality (addr->ref (),
					  Constant::create (a, 0,
							    addr->get_bv_size()));
		  State *tmp = restrict_state_to_condition (ns, pc_constraint);
		  pc_constraint->deref ();
		  ns->deref ();
		  ns = tmp;
		}
	      result->insert (ns);
	    }
	  newctx->deref ();
	  delete targets;
	}
    }
  catch (UndefinedValueException &e)
    {
      delete newctx;
      for (typename StateSet::iterator i = result->begin ();
	   i != result->end (); i++)
	(*i)->deref ();
      delete result;
      throw;
    }

  return result;
}

template <typename CTX, typename PP>
void
AbstractDomainStepper<CTX,PP>::
  set_map_dynamic_jumps_to_memory (bool value)
{
  map_dynamic_jumps_to_memory = value;
}

template <typename CTX, typename PP>
void
AbstractDomainStepper<CTX,PP>::set_dynamic_jump_threshold (int value)
{
  dynamic_jump_threshold = value;
}

template <typename CTX, typename PP>
void
AbstractDomainStepper<CTX,PP>::exec (Context *newctx, const Statement *st)
{
  assert (newctx != NULL);

  const Assignment *assign = dynamic_cast<const Assignment *> (st);
  if (assign == NULL)
    return;

  Memory *memory = newctx->get_memory ();

  if (assign->get_lval()->is_MemCell())
    {
      const MemCell *cell =
	dynamic_cast<const MemCell *> (assign->get_lval());

      assert (cell->get_bv_offset () == 0);
      assert (cell->get_bv_size () == assign->get_rval()->get_bv_size ());
      Value va (eval (newctx, cell->get_addr ()));
      Address a (value_to_address (newctx, va));
      Value v (eval (newctx, assign->get_rval()));
	
      memory->put (a, v, arch->get_endian ());
    }
  else if (assign->get_lval()->is_RegisterExpr())
    {
      RegisterExpr *reg = (RegisterExpr *) assign->get_lval();
      const RegisterDesc *rdesc = reg->get_descriptor();
      Value v (eval (newctx, assign->get_rval ()));
      Value regval;
	
      if (v.get_size () != rdesc->get_register_size ())
	{
	  if (memory->is_defined (rdesc))
	    regval = memory->get (rdesc);
	  else
	    regval = unkgen->unknown_value (rdesc->get_window_size ());

	  v = embed_eval (regval, v, reg->get_bv_offset());
	}
      memory->put (rdesc, v);
    }
}

template <typename CTX, typename PP>
typename AbstractDomainStepper<CTX,PP>::Value
AbstractDomainStepper<CTX,PP>::unknown_value (int size)
{
  return unkgen->unknown_value (size);
}

template <typename CTX, typename PP>
typename AbstractDomainStepper<CTX,PP>::UnknownGenerator *
AbstractDomainStepper<CTX,PP>::get_unknown_value_generator ()
{
  return unkgen;
}

template <typename CTX, typename PP>
void
AbstractDomainStepper<CTX,PP>::set_unknown_value_generator
(typename AbstractDomainStepper<CTX,PP>::UnknownGenerator *gen)
{
  assert (gen != NULL);
  unkgen = gen;
}

#endif /* ! ABSTRACTDOMAINSTEPPER_II */
