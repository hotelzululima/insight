@node Advanced features
@chapter Advanced features

@node Using stubs
@section Using stubs

Still on our running example, we can notice (using the @code{view_asm()}
or @code{disas()} functions) that several symbols are discovered:
@t{__libc_start_main}, @t{_dl_aux_init}, @t{_dl_discover_osversion}, ...
It seems that simulation has entered inside initialization procedure
done by the @t{libc} library. This part of the program should not be
actually connected with the behaviors of the @t{crackme} challenge.

@iii{} offers a mechanism to bypass parts of the program. It is possible to
preload a microcode model at a specified address. These preloaded models are
called @emph{stubs}. 

In order to skip the initialization work done by @t{__libc_start_main}, we 
have to:
@itemize
@item Abstract the behaviors of @t{__libc_start_main} into a microcode model;
@item Create a loadable (i.e., @t{xml}) file for this model;
@item Attach this model to the address of @t{__libc_start_main}.
@end itemize

The disassembly of program from the entrypoint (@t{_start}) shows that the
address @t{0x8048da9} is pushed onto the stack just before the call to 
@t{__libc_start_main}. This address points to @t{main} function@footnote{This 
information can be obtained (if available) using the table of symbols attached 
to the program; try @code{help(prog().sym)}.}. When @t{__libc_start_main} has
finished its jobs, it jumps to the address pushed by @t{_start} onto the stack.

@smallexample
iii> disas (entrypoint())
08048c18 <_start>: 
 8048c18:	xor    %ebp,%ebp
 8048c1a:	pop    %esi
 8048c1b:	mov    %esp,%ecx
 8048c1d:	and    $0xfffffff0,%esp
 8048c20:	push   %eax
 8048c21:	push   %esp
 8048c22:	push   %edx
 8048c23:	push   $0x80494c0
 8048c28:	push   $0x8049420
 8048c2d:	push   %ecx
 8048c2e:	push   %esi
 8048c2f:	push   $0x8048da9
 8048c34:	call   0x8048e80 # jump to : __libc_start_main
08048e80 <__libc_start_main>: 
 8048e80:	push   %edi
 8048e81:	mov    $0x80ea5c0,%eax
 8048e86:	push   %esi
 8048e87:	push   %ebx
 8048e88:	sub    $0x40,%esp
 8048e8b:	test   %eax,%eax
 8048e8d:	mov    0x5c(%esp),%esi
 8048e91:
iii> 
@end smallexample

Since initialization done by @t{__libc_start_main} does not matter for our
analysis, we will abstract its behaviors as a direct jump to the @t{main} 
function. For this purpose we could create a microcode model that jump to the 
address @t{0x8048da9} but this is not re-usable at all; we should prefer to 
jump to the address stored in the stack.

Microcode files are XML files. Even if the model for @t{__libc_start_main} is
quite simple, writing it by hands is a tedious task. The simplest way to 
proceed is to:
@enumerate 
@item Write the abstraction into a small @t{x86} assembly program:
@verbatim
$ cat stub_libc_start_main.s
@end verbatim
@verbatiminclude demo/stub_libc_start_main.s
@verbatim
$
@end verbatim

@item Compile it using @command{gcc} for instance;
@verbatim
$ gcc -m32 -c stub_libc_start_main.s -o stub_libc_start_main.o
@end verbatim
@item Generate the microcode file using the @command{cfgrecovery} tool. A simple
linear sweep disassembly is sufficient to generate the exact microcode for this
small program
@verbatim
$ cfgrecovery -f mc-xml -d linear stub_libc_start_main.o -o \
  stub_libc_start_main.mc.xml
@end verbatim
@end enumerate

Now we have the abstraction for @t{__libc_start_main} stored into the file
@file{stub_libc_start_main.mc.xml}; it remains to load it at the address pointed
by the @t{__libc_start_main} symbol. The function @code{load_stub()} is used for 
this purpose. All stubs should be loaded before the first call to @code{run()}. 
Actually stubs are merged into the microcode on demand and not as a replacement 
of existing microcode. @code{load_stub()} takes three arguments: a filename, an 
address and a Boolean that indicates whether the microcode must be relocated at 
the same microcode address or not. 

@node Initialization file
@section Initialization file

Since we already have recovered the first instruction of @t{__libc_start_main},
the loading of the stub is useless; we must restart @iii{} to make the stub 
effective. 

If we restart @iii{}, we have to redo all the work we have done so far;
and it will be the case each time we will restart the tool. Fortunately,
@iii{} permits to specify an initialization module using the @option{-c}
option. When no module is specified, the interpreter looks for a module
called @file{iiirc}. This file must be a @t{Python} script that contain
calls to @iii{} functions.

The initialization file must first import @Insight{}/@iii{} functions
into the script (@code{insight.debugger} and @code{insight.iii}). Then,
comes a line that indicates the binary file to load (see
@code{help(binfile)} for details). And, then, it follows all our
previous work:
@enumerate
@item First the stub for @t{__libc_start_main} is loaded;
@item Then we define a function, @code{init_registers}, in charge of the 
      initialization of registers according to a global table @var{valregs}. 
@item Hooks are then attached: @code{init_registers} is attached to @code{run} 
and @code{view_asm} is attached to simulation functions.
@item Finally the simulation is started.
@end enumerate 

@smallexample
$ cat iiirc.py
@verbatiminclude demo/demo-setup-1.py
@end smallexample

Starting @iii{} with the above initialization module will produce the
following output:
@smallexample
$ iii 
Insight Interactive Inspector
Try 'help(insight.debugger)' to get information on debugger commands.
Type 'aliases()' to display list of defined aliases.

Arrows from (0x8048c18,0):
0 : (0x8048c18,0) %ebp@{0;32@} := (XOR %ebp@{0;32@} %ebp@{0;32@})@{0;32@} --> (0x8048c18,1)
stop in a configuration with several output arrows
Arrows from (0x805ad7a,0):
0 : (0x805ad7a,0) << %zf@{0;1@} >> Skip --> (0x805ad9b,0)
1 : (0x805ad7a,0) << (NOT %zf@{0;1@})@{0;1@} >> Skip --> (0x805ad7c,0)

iii> 
@end smallexample

And, thanks to the @code{view_asm} window, we can see on
@ref{fig:viewasm02} that the simulation has gone yet farther. Indeed,
the actual code of @t{__lib_start_main} has been skipped thanks to its
attached stub. However, @iii{} is now simulating another function of the
standard library: @code{printf}. This function will be replaced by the
following stub:

@smallexample
@verbatiminclude demo/stub_printf.s
@end smallexample

We assume that it has no interesting side effect and enforce its return
value to 0 which is stored to @t{eax}. Another standard function should appear
later, @t{read}, which is called to read the password. The stub for this 
function is the following:

@smallexample
@verbatiminclude demo/stub_read.s
@end smallexample

This stub simulates the read of @var{n} characters stored into a memory area
at address @var{p}. @var{n} and @var{p} are themself stored onto the stack at 
@code{12(%esp)} and @code{8(%esp)}, respectively. Then the stub assigns the
@var{n} memory cells with the value @t{0x33}. This special value is used to 
locate the assignment into the microcode file. This value is replaced by hand 
(or a @command{sed} script) by a @code{RND} expression that will be interpreted
as an unknown value by the symbolic simulator.

@float Figure,fig:viewasm02
@center @image{view_asm_02,10cm,,,.png}
@caption{Graphical view of the Microcode. @t{__lib_start_main} has been 
replaced by its stub but, @t{__printf} is now decoded.}
@end float 

We add the new @code{load_stub} calls into the initialization file and restart
the tool. The simulation stops on a @code{jne} instruction. The CFG is the 
following:

@center @image{view_asm_03,10cm,,,.png}

After the call to @code{read} i.e., the user has entered its password, the 
program enters into a loop. The small piece of code that precedes the loop does 
the following things:
@itemize 
@item At address @t{0x8048ddb}, the return value of @code{read} is copied from
      @t{eax} into @t{edx}. @t{edx} is then decremented and a null character 
      is stored at the address @t{0x8048d44+eax}. Indeed, the last byte read 
      from the standard input is a carriage-return character. At address 
      @t{0x8048dde}, it is replaced by @t{0} in order to form a valid 
      null-terminated C string. @t{edx} store the length of the password and
      must not take into account the last null byte.
@item From addresses @t{0x8048de5} to @t{0x8048dec}, registers @t{esi}, 
      @t{edi} and @t{ecx} are prepared for some string operation. @t{esi} and 
      @t{edi} are the source and destination pointers of the operation and 
      @t{ecx} the number of iterations. We can see that, @t{esi} and @t{edi} 
      have the same starting value (@t{0x8048e08}).
@end itemize 

According to the value assigned to @t{ecx}, the loop is iterated 28 times. At 
each iteration of the loop, the byte pointed by @t{esi} is XOR-ed with @t{0xaa}.
The loop covers addresses between @t{0x8048e08} and @t{0x8048e24} which are
located few bytes after the loop itsef. This means that this loop is used to
modify instructions just after the loop; it is a known trick to obfuscate 
programs and prevent static-analysis of it.

We can compare on-the-fly decoded instructions by the simulator and the
ones that were loaded at start-up using functions @code{disas} (left)
and @code{insight.utils.pretty_disas_memory}@footnote{@code{prog()}
returns an opaque object that contains the loaded binary file.} (right).
The latter uses a @emph{linear sweep} algorithm on the original binary
file raw bytes.

@multitable @columnfractions .45 .45
@item 
@smallexample
iii> disas (0x8048e08, l=8)
 8048e08:	xor   %eax,%eax
 8048e0a:	lods  %ds:(%esi),%al
 8048e0b:	add   %ebx,%eax
 8048e0d:	shl   %eax
 8048e0f:	xor   $0x12,%eax
 8048e12:	mov   %al,%bl
 8048e14:	scas  %es:(%edi),%al
 8048e15:	jne   0x8048e3f # jump to L_1
 8048e17:
@end smallexample

@tab
@smallexample
iii> insight.utils.pretty_disas_memory
... (prog(), 0x8048e08, l=8)
 8048e08 :	fwait
 8048e09 :	push  $0x6
 8048e0b :	stos  %eax,%es:(%edi)
 8048e0c :	jb    0x8048e89
 8048e0e :	dec   %edx
 8048e0f :	sub   %ebx,-0x48(%edx)
 8048e12 :	and   0x4(%ecx),%ch
 8048e15 :	fild  -0x5cbebab8(%edx)
@end smallexample
@end multitable

@node Examining memory
@section Examining memory

We are still stuck at address @t{0x8048e15}. @code{arrows()} tells us
what are the enabled arrows and we choose to follow the arrow @code{0}.
@smallexample
iii> arrows()
Arrows from (0x8048e15,0):
0 : (0x8048e15,0) << (NOT %zf@{0;1@})@{0;1@} >> Skip --> (0x8048e3f,0)
1 : (0x8048e15,0) << %zf@{0;1@} >> Skip --> (0x8048e17,0)

iii> cont(0)
sink node reached after(0x8048e59, 2)
Arrows from (0x8048c39,0):
iii>
@end smallexample
The tool indicates that the simulator has reached a sink node i.e., no successor
state can be visited. If we have a look at the code visited after the 
conditional jump at address @t{0x8048e15} we obtain:

@smallexample
iii> disas(0x8048e3f,10)
08048e3f <L_2>: 
 8048e3f:	mov    %esp,%ebp
 8048e41:	sub    $0x4,%esp
 8048e44:	and    $0xfffffff0,%esp
 8048e47:	add    $0x4,%esp
 8048e4a:	push   $0x8048e62
 8048e4f:	call   0x8049dd0 # jump to : printf, __printf, _IO_printf
08048e54 <L_4>: 
 8048e54:	mov    %ebp,%esp
 8048e56:	xor    %eax,%eax
 8048e58:	inc    %eax
 8048e59:	ret     # jump to : L_0
 8048e5a:
@end smallexample

The program prints out (using @code{printf}) a string stored at address 
@t{0x8048e62} and then returns (to the termination instruction @code{hlt}).
@code{dump} function is used to display values stored in the memory for the 
current state. Let's try to dump it directly from the memory:
@smallexample
iii> dump(0x8048e62, l = 10)
0x57@{0;8@}
0x72@{0;8@}
0x6f@{0;8@}
0x6e@{0;8@}
0x67@{0;8@}
0x20@{0;8@}
0x70@{0;8@}
0x61@{0;8@}
0x73@{0;8@}
0x73@{0;8@}
iii>
@end smallexample

We get 10 values. Actually these are @emph{symbolic} values; even if they are
concrete. Here we were lucky to get constants and no abstract values.
@code{dump()} accepts an additional parameter that is a callback called to 
transform the value returned by the simulator. The following @code{Python} 
script defines a function that we will use later to translate abstract constants into
printable characters. This code is added to the configuration file.
@smallexample
import re

def filter_abstract_byte (val):
    """translate a concrete "abstract" value into a character"""
    p = re.compile('^(0x[0-9A-Fa-f]{1,2})\{.*\}$')
    m = p.match (val)
    if m is not None:
        return chr(int(m.group(1),16))
    else:
        return val
@end smallexample

If we call @code{dump} with @code{filter_abstract_byte} we get:
@smallexample
iii> dump(0x8048e62, l = 10, filter=filter_abstract_byte)
W
r
o
n
g
 
p
a
s
s
iii> 
@end smallexample
We can deduce from the content of this string that we have followed the
branch where the user enters a wrong password.

@node Assignment of abstract values
@section Assignment of abstract values

We restart the simulation and continue until coming back to the
conditional jump at address @t{0x8048e15}. This time we will follow the second
branch:
@smallexample
iii> r(); c(); c(1)
Arrows from (0x8048c18,0):
0 : (0x8048c18,0) %ebp@{0;32@} := (XOR %ebp@{0;32@} %ebp@{0;32@})@{0;32@} --> (0x8048c18,1)
stop in a configuration with several output arrows
Arrows from (0x8048e15,0):
0 : (0x8048e15,0) << (NOT %zf@{0;1@})@{0;1@} >> Skip --> (0x8048e3f,0)
1 : (0x8048e15,0) << %zf@{0;1@} >> Skip --> (0x8048e17,0)
stop in a configuration with several output arrows
Arrows from (0x8048e15,0):
0 : (0x8048e15,0) << (NOT %zf@{0;1@})@{0;1@} >> Skip --> (0x8048e3f,0)
1 : (0x8048e15,0) << %zf@{0;1@} >> Skip --> (0x8048e17,0)
iii> 
@end smallexample
We are back to the instruction at @t{0x8048e15} but this time we have visited 
a new loop as show on the following CFG:

@float Figure,fig:viewasm04
@center @image{view_asm_04,10cm,,,.png}
@end float

The reader should wonder why the simulation did not stop at instruction
@t{0x8048e17} while two outgoing arrows exist there. Indeed, the simulator
follows @t{#0} arrow because it is the only one that is enabled ! Let's see why.
We make a single step from @t{0x8048e15} to @t{0x8048e17}.
@smallexample
iii> arrows()
Arrows from (0x8048e15,0):
0 : (0x8048e15,0) << (NOT %zf@{0;1@})@{0;1@} >> Skip --> (0x8048e3f,0)
1 : (0x8048e15,0) << %zf@{0;1@} >> Skip --> (0x8048e17,0)
iii> s(1)
Arrows from (0x8048e17,0):
0 : (0x8048e17,0) %ecx@{0;32@} := (SUB %ecx@{0;32@} 0x1@{0;32@})@{0;32@} --> (0x8048e17,1)
iii> ms()
Arrows from (0x8048e17,1):
0 : (0x8048e17,1) << (NEQ %ecx@{0;32@} 0x0@{0;32@})@{0;1@} >> Skip --> (0x8048e08,0)
iii> register("ecx")
'0x6@{0;32@}'
iii>
@end smallexample
The @code{loop} assembly instruction jumps to @t{0x8048e08} until
@t{ecx} falls to @code{0}. However, in the current state, register
@t{ecx} is the constant @code{6}; thus, the second arrow going out of
the @code{loop} instruction can not be enabled.

We will be back on the loop later. For the moment we want to know what
happens when the program follows the second branch. To enable the arrow
that moves to address @t{0x8048e19} we request the simulator to forget
the current value of @t{ecx}. This is done using the function
@code{unset()} (see @code{help(unset)}).

@code{unset()} permits to replace the current value of a register or a memory
cell with an @emph{unknown value}. In the context of symbolic simulation,
this means that a fresh variable is used in place of the current value.

@code{unset()} takes one, two or three parameters. Only the first one,
@var{loc} is mandatory; it is a register or an address. The second
parameter, @var{len}, is the size of the memory area that is asbtracted;
by default @var{len} is set to 1. The third parameter, @var{keep}, is a
Boolean value that indicates whether or not the new value must be kept
consistent with the old one. This notion of consistency varies with the
domain used for the simulation. In the case of symbolic simulation this
means that:
@itemize
@item if @var{keep} is @t{true}, the new state generated by @code{unset} 
enforces the fresh variable, say @t{fv}, to be equal to the current value 
@t{val} of the register or memory cell i.e., the constraint @t{fv=val} is 
added to the path-condition.
@item if @var{keep} is @t{false}, the new state generated by @code{unset} 
forgets the current value and any value can be assigned to the fresh 
variable.
@end itemize
@var{keep}=@t{true} is used to maintain the simulation into a real execution
path. Using @var{keep}=@t{false} means that the simulation is authorized to
follow a spurious trace; this is exactly what we want to do there: we want 
to enforce the trace to follow an arrow that is not possible in the current
state.

@smallexample
iii> arrows()
Arrows from (0x8048e17,1):
0 : (0x8048e17,1) << (NEQ %ecx@{0;32@} 0x0@{0;32@})@{0;1@} >> Skip --> (0x8048e08,0)
iii> unset("ecx",keep=False)
iii> register("ecx")
'{abs_50_0x8048e17_1_32b}@{0;32@}'
iii> arrows()
Arrows from (0x8048e17,1):
0 : (0x8048e17,1) << (NEQ %ecx@{0;32@} 0x0@{0;32@})@{0;1@} >> Skip --> (0x8048e08,0)
1 : (0x8048e17,1) << (NOT (NEQ %ecx@{0;32@} 0x0@{0;32@})@{0;1@})@{0;1@} >> Skip --> (0x8048e19,0)
iii> cont(1)
@end smallexample
Now, the value assigned to @t{ecx} is a fresh symbol. The prefix @t{abs}
is used to indicate that the variable comes from an abstraction required
by the user and the address locates the program point where the
abstraction has been invoked. The two arrows becomes enabled and we can
now follow the arrow to @t{0x8048e19}.

@center @image{view_asm_05,10cm,,,.png}

On the CFG, we can see that, after the loop, the program reaches a call
to the @code{libc} function @code{system()}. It is invoked with the
string located at address @t{0x8048e5a} as parameter (see instruction at
@t{0x8048e2f}).

@smallexample
iii> dump(0x8048e5a,l=10,filter=filter_abstract_byte)
/
b
i
n
/
s
h

W
r
iii> 
@end smallexample
Good news! The call to @code{system()} spawns a shell @command{/bin/sh}; this is
where we have to go. We, now, get back to the analysis of the loop.

@node Breakpoints
@section Breakpoints

In order to study the loop between addresses @t{0x8048e08} and
@t{0x8048e17} (see @ref{fig:viewasm04}), we execute @code{r(); c()}. As
suggested by instructions at @t{0x8048df7} and @t{0x8048dfc}, we are
apparently in a loop that compares strings located at addresses
@t{0x8048d45} and @t{0x8048e1b}. Since the instruction @code{loop} is
used to iterate the comparisons, it means that the length of the strings
is stored into @t{ecx} by instruction at @t{0x8048e01} which assigns
@t{edx} to @t{ecx}. Now remember that @t{edx} is the length of the input
(see remarks related to @t{read} in @ref{Initialization file}).

Let's have a look to these strings:
@smallexample
iii> register("edx")
0x8{0;32}
iii> dump(0x8048d45, l = 8, filter = filter_abstract_byte)
{uv_58_0x8056020_3_8b}@{0;8@}
{uv_60_0x8056020_3_8b}@{0;8@}
{uv_62_0x8056020_3_8b}@{0;8@}
{uv_64_0x8056020_3_8b}@{0;8@}
{uv_66_0x8056020_3_8b}@{0;8@}
{uv_68_0x8056020_3_8b}@{0;8@}
{uv_70_0x8056020_3_8b}@{0;8@}
{uv_72_0x8056020_3_8b}@{0;8@}
iii> dump(0x8048e1b, l = 8, filter = filter_abstract_byte)
?
Z
2
P
4
>
?
?
iii> 
@end smallexample
We can deduce that string at @t{0x8048d45} is the input string (fresh variable
has been generated by @t{__read}). String at @t{0x8048e1b} is quite cryptic;
it should be a hashed value of the password. 

Interpreting the code of the loop could be a complicated task. In order to
understand it we can try to wait the termination of the loop and have a look to
the content of the state.

To this aim we could iterate the loop by hand until instruction @t{0x8048e17}
permits us to go to @t{0x8048e19} but this a tedious work. A more generic way 
is the following:
@enumerate
@item We create a conditional breakpoint at @t{0x8048e17} that will be enabled 
      when @t{ecx} is equal to @t{1} (@code{loop} first decreases @t{ecx} before 
      checking its value).
@item We add a constraint at @t{0x8048e15} that enforces the simulator
      to stay in the loop.
@end enumerate

The function @code{breakpoint()} requests the simulator to stop at a
given address. Used without argument, it sets a breakpoint at the
current program point. Otherwise, it takes a microcode address (a global
and a local address); and the latter is by default set to @t{0}. The
function returns the identifier of the breakpoint; it can be used later
by a client script.

@smallexample
iii> breakpoint(0x8048e17)
breakpoint set at (0x8048e17,0) with id=1.
1
iii>
@end smallexample

To make a breakpoint conditional we use the function @code{cond()}. It
can be invoked with one or two arguments. The first one is always an
identifier of a breakpoint. The second one is a string that contains the
condition to enable the breakpoint. The syntax of these expressions is
given elsewhere in @Insight{} documentation. If the second argument is
omitted the condition is removed from the breakpoint.

@smallexample
iii> cond (1, "(EQ %ecx 1)")
making breakpoint 1  conditional
1  :  breakpoint: (0x8048e17,0) cond = (EQ %ecx@{0;32@} 0x1@{0;32@})@{0;1@}
iii> 
@end smallexample
The reader should notice that, in expressions, registers are prefixed by a
'@t{%}' character as in AT&T syntax.
The list of breakpoints can be obtained using @code{show ("breakpoints")}:
@smallexample
iii> show ("breakpoints")
1  : hits=0 breakpoint: (0x8048e17,0) cond = (EQ %ecx@{0;32@} 0x1@{0;32@})@{0;1@}
iii> 
@end smallexample
@code{show("breakpoints")} gives the number of times the simulation did
hit the breakpoint.

In order to enforce the simulator to continue inside the loop at
instruction @t{0x8048e15}, we use the function @code{assume()}. This
latter can take up to 3 arguments; the third one is the local component
of a microcode address and is, by default, set to @t{0}. The first
argument is the location where the enforcement takes place i.e., an
address. The second argument is a string that contains a Boolean
expression (same syntax as for conditional breakpoints).

In the context of symbolic simulation, the @code{assume()} adds
constraints on the path condition with its second argument. The list of
assumptions can be displayed using the function
@code{show("assumptions")}:

@smallexample
iii> assume(0x8048e15, "%zf")
iii> show("assumptions")
0x8048e15 : %zf@{0;1@}
iii> cont()
@end smallexample

After the assumption at @t{0x8048e15}, we let the simulator does its work and 
wait for the termination of the loop.

@node Concretization
@section Concretization

After a while we get:
@smallexample
iii> cont()
stop condition 1 reached: breakpoint: (0x8048e17,0) cond = (EQ %ecx@{0;32@} 0x1@{0;32@})
@{0;1@}
Arrows from (0x8048e17,0):
0 : (0x8048e17,0) %ecx@{0;32@} := (SUB %ecx@{0;32@} 0x1@{0;32@})@{0;32@} --> (0x8048e17,1)
iii> s()
Arrows from (0x8048e19,0):
0 : (0x8048e19,0) Skip --> (0x8048e24,0)
iii> 
@end smallexample

The simulator says that it stops because it encounters the conditional 
breakpoint at address @t{0x8048e17} while its condition enables it. 
Contrary to previous sections, this time, if we make a step forward the 
simulator exits the loop. Now, we have to look at what has been computed.

In @ref{Breakpoints}, we have discovered that the string at address 
@t{0x8048d45} is the input given by the user. If we look at the content of
the string we can notice that it does not change.

@smallexample
iii> dump(0x8048d45, l = 8, filter = filter_abstract_byte)
{uv_58_0x8056020_3_8b}@{0;8@}
{uv_60_0x8056020_3_8b}@{0;8@}
{uv_62_0x8056020_3_8b}@{0;8@}
{uv_64_0x8056020_3_8b}@{0;8@}
{uv_66_0x8056020_3_8b}@{0;8@}
{uv_68_0x8056020_3_8b}@{0;8@}
{uv_70_0x8056020_3_8b}@{0;8@}
{uv_72_0x8056020_3_8b}@{0;8@}
@end smallexample

A quick look at the iterated code shows that it just compute a value that
is then compared at the corresponding offset in the hashed password located at 
@t{0x8048e1b}.

@smallexample
iii> disas(0x8048e08,l=10)
08048e08 <L_3>: 
 8048e08:	xor    %eax,%eax
 8048e0a:	lods   %ds:(%esi),%al
 8048e0b:	add    %ebx,%eax
 8048e0d:	shl    %eax
 8048e0f:	xor    $0x12,%eax
 8048e12:	mov    %al,%bl
 8048e14:	scas   %es:(%edi),%al
 8048e15:	jne    0x8048e3f # jump to : L_2
 8048e17:	loop   0x8048e08 # jump to : L_3
 8048e19:	jmp    0x8048e24 # jump to : L_4
 8048e1b:
iii> 
@end smallexample

Actually the data related to computed values is stored in the path condition
accumulated each time we enforced the simulator to follow the arrow @t{#1} 
to stay in the loop. 

Now, we are outside the loop. This means that the current state of the
simulation encodes all traces that can reach the current program point
(i.e., @t{0x8048e19}). Thanks to the SMT-solver integrated to
@Insight{}, it is possible to compute an assignment of fresh variables
(i.e., a concrete input) that satisfies the path-condition of the
current state.

Here, we reuse a function already encountered: @code{set()}. In 
@ref{Step-by-step simulation}, this section was used to assign a value to 
register @t{esp}; the function was called with two arguments. This time, we
use @code{set} without specifying a value. In this case, @iii{} requests the
SMT solver to pick-up a value that is consistent with the current state.

The following script calls @code{set} for each byte of the input string.
Then @iii{} displays values computed by the solver.
@smallexample
iii> for i in range(8): set (0x8048d45 + i)
...
iii> dump(0x8048d45, l = 8, filter = filter_abstract_byte)
I
v
6
o
C
b
2
U
iii>
@end smallexample
It is the password; see @ref{Analyzed program}.

@endinput
